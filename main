#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct PolyNode *Polynomial;
struct PolyNode{
	int coef;
	int expon;
	Polynomial link;
};

void Attach(int c,int e,Polynomial *pRear);
int compar(int a,int b);
Polynomial Polyread();
Polynomial PolySum(Polynomial P1, Polynomial P2);
Polynomial PolyMult(Polynomial P1,Polynomial P2);
void PolyPrint(Polynomial P);


int main(){
	/*
	读多项式p1；				P1 = Polyread(P1);
	读多项式p2；				P2 = Polyread(P2);
	使PS等于两多项式相加；		PS = PolySum(P1,P2);
	输出PS；					PolyPrint(PS);
	使PM等于两多项式相乘；		PM = PolyMult(P1,P2);
	输出PM；					PolyPrint(PM);
	*/
	
	Polynomial P1,P2,PS,PM;
	
	P1 = Polyread();
	P2 = Polyread();
	PS = PolySum(P1,P2);
	PolyPrint(PS);
	PM = PolyMult(P1,P2);
	PolyPrint(PM);
	
	return 0;
}

Polynomial Polyread(){
	Polynomial P,Rear,t;
	int c,e,N;
	
	printf("Please enter the number of nodes of your P : ");
	scanf("%d",&N);
	P = (Polynomial)malloc(sizeof(struct PolyNode));
	P -> link = NULL;
	Rear = P;
	while(N--){
		printf("Please enter the value of c and e : ");
		scanf("%d %d",&c,&e);
		Attach(c,e,&Rear);
	}
	t = P; 
	P = P -> link;
	free(t);
	return P;
}

Polynomial PolySum(Polynomial P1, Polynomial P2){
	Polynomial front,rear,temp;
	int sum;
	
	rear = (Polynomial)malloc(sizeof(struct PolyNode));
	rear -> link = NULL;
	front = rear;
	
	while(P1&&P2)
		switch(compar(P1 -> expon,P2 -> expon)){
			case 1:
				Attach(P1 -> coef, P1 -> expon, &rear);
				P1 = P1 -> link;
				break;
			case 0:
				sum = P1 -> coef + P2 -> coef;
				if(sum) 
					Attach(sum,P1 -> expon, &rear);
				P1 = P1 -> link;
				P2 = P2 -> link;
				break;
			case -1:
				Attach(P2 -> coef, P2 -> expon, &rear);
				P2 = P2 -> link;
				break;
		}
	
	for(;P1;P1 = P1 -> link) Attach(P1 -> coef, P1 -> expon, &rear);
	for(;P2;P2 = P2 -> link) Attach(P2 -> coef, P2 -> expon, &rear);
	rear -> link = NULL;
	temp = front;
	front = temp -> link;
	free(temp);
	return front;
}

Polynomial PolyMult(Polynomial P1,Polynomial P2){
	Polynomial t1,t2,front,rear,temp,t;
	int c,e,sum;
	int flag = 1;
	
	if(!P1||!P2) return NULL;
	
	t1 = P1;
	t2 = P2;
	front = (Polynomial)malloc(sizeof(struct PolyNode));
	front -> link = NULL;
	rear = front;

	for(;t2;t2 = t2 -> link){
		c = t1 -> coef * t2 -> coef;
		e = t1 -> expon + t2 -> expon;
		Attach(c,e,&rear);
	}
	t1 = P1 -> link;
	for(;t1;t1 = t1 -> link){
		t2 = P2;
		temp = front;
		for(;t2;t2 = t2 -> link){
			c = t1 -> coef * t2 -> coef;
			e = t1 -> expon + t2 -> expon;
			while(temp -> link &&temp -> link -> expon > e){
				temp = temp -> link;
			}
			if(!temp ->link){
				Attach(c,e,&rear);
			}
			else if(temp -> link -> expon == e){
				sum = c + temp -> link -> coef;
				if(sum){
					temp -> link -> coef = sum;
				}
				else{
					t = (Polynomial)malloc(sizeof(struct PolyNode));
					t = temp -> link;
					temp -> link = t -> link;
					free(t);
				}
			}
			else if(temp -> link -> expon <e){
				t = (Polynomial)malloc(sizeof(struct PolyNode));
				t -> coef = c;
				t -> expon = e;
				t -> link = temp -> link;
				temp -> link = t;
			}
		}
	}
	t2 = front;
	front = front -> link;
	free(t2);
	return front;
}

void PolyPrint(Polynomial P){
	if(!P) 
		printf("NUlL");
	else{
		while(P){
			printf("The coef of this node is :%d\t",P -> coef);
			printf("The expon of this node is :%d\n",P -> expon);
			P = P -> link;
		}
	}	printf("That's all.\n");
}

void Attach(int c,int e,Polynomial *pRear){
	Polynomial P;
	P = (Polynomial)malloc(sizeof(struct PolyNode));

	P -> coef = c;
	P -> expon = e;
	P -> link = NULL;
	(*pRear) -> link = P;
	*pRear = P;
}

int compar(int a,int b){
	if(a > b) return 1;
	else if(a == b) return 0;
	else return -1;
}

